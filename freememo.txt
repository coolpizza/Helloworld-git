
	



    class meet implements Comparable <meet> {
        int num;
        int start;
        int end;
        meet (int num, int start, int end) {
             this.num = num; 
             this.start = start;
             this.end = end;
        }
        @Override
        public int  compareTo(meet o) {
             if (this.end == o.end) {
                 return this.start-o.start;
             } else {
              return this.end-o.end;
        }
      }

      ArrayList <meet> arlist = new ArrayList<>();
       meet []mt = new meet[100];

      arlist.add(new meet(a, b, c));
      mt[i] = new meet(a,b,c));
     
----------------------------------------------------------------
<2A<3B>CE>
-->ABBBCEABBBCE
           char []loop;
                 loop  =     sc.next().toCharArray();
                 analysisLoop(char []a, int s) {
                      
                 int x = s;
                 int count ; 
                 count  = a[s+1] - "0";      
                 

                 while (count-->0) {
                            x  = s+2;

                         while ( a[x]  != ">" )   {
                              if ( a[x] == "<") 
                                   x = analysisLoop(a, x);
                              else
                                      print (a[x]);
                              x++;
                          
 
                         }
 
                 }
----------------------------------------------------------------------------

  5 2 4 2 6 1

stack[1] = 5,


 int N, int []H = new int [80000];

   int []stack = new int [80000];

     int sp= 0;

       for (int i=0; i < N;i++) {
         
            while(sp>0)  {
                if (  H[i]< stack[sp] ) {

                      break;

                }
                sp--;                    
            }
            stack[++sp] = H[i];
            ;
            
       }                  

---------------------------------------------
    long pos; int sp = 0;

    for (int i = 0; i<N; i++) {
      
      for ( ; (sp>0)  && stack[sp] >= pos) ; sp--)   ;
      stack[++sp] = pos;
    }

    retur sp;

------------------------------------------
잔돈처리.

  3(N)  8 (M) 
  1 3 5   --> coin[m]
  
    dp[] ;
    int []dp;  dp = new int[100];

  
    for (int i = 0; i < N; i++ ) {
        for (int j = coin[i]; j < M; j++) {
            Math.min(dp[j], dp[j-coin[i]]+1);             

        }
    }
   return dp[M];
--------------------------------------------
   
   dc[] = { -1,1,0,0 }
   dr[] = {0, 0, -1,1}
   
   map[x][y] 
    
   for (int i =0 ; i < 4; i++) {
     map[i] = sc.next().toCharArray( ); 
   }



   void dfs(int x, int y) {

       if (x<0 || x > maxx || y<0 || y > maxy) return false;
       
       if (visit[x][y]== 0) {
           visit[x][y] = 1;
          for (int i=0; i< 4; i++) {
              nr = dr[];
              nc = dc[];
              dfs(nr, nc);
          }
        }                            
         count = 0;
         for (int i=0; i < N; i++) {
              for (int j=0; j < M; j++) {  

                     dfs(i,j);
                      count++;
              }
          }

------------------------------------------------------------
road construct  (도로건설)

     class Q {
          int r, c;
          Q(int r, int c) {
              this.r = r;
              this.c = c;
          }
     }
     
     Q[] queue;
     queue = new Q[100];
     int visit[][] = new int [110][110];
     
     int BFS() {
         int dr[] = {-1,1,0,0};
         int dc[] = {0,0,-1,1};
         
         int wp, rp = 0;        
         queue[wp++] = new Q(0,0);

         visit[0][0] = 0;   // BFS에서는 visit 꼭 챙겨야 함. 여기서 이값은 가중치를 판단하는 변수 역할을 하고 있음.        

         while (wp>rp) {
              Q out;
              out = queue[rp++];
              for (int i=0; i < 4; i++) {  
                   nr = out.r+dr[i];
                   nc = out.c+dc[i];
 
                   if (nr > max || nr < 0 || nc > max || nc< 0) continue;
                   /// 여기 부분이 핵심 !!
                   if (visit[nr][nc] > visit[out.r][out.c] + map[nr][nc] - '0') {
                      visit[nr][nc] =  visit[out.r][out.c] + map[nr][nc] - '0');
                      queue[wp++] = new Q(nr, nc);
                   
                   }
         } 
        
-------------------***********************************************
뇌를 이기자 .......이번이 인생의 숙제를 해소할 절호의 기회이다. 
*******************#################################

  time[i][0]   // 시작시간
  time[i][1]   // 종료시간


  //종료시간 기준으로 하되 동일하면 시작시간을 기준으로 한다.
 
 Arrays.sort(time , new Comparator <int[]>() {

    @Override 
    public int compare(int[]o1, int []o2) { 
        if (o1[1] == o2[1])  {  
               return o1[0]-o2[0];
        }
        return o1[1]-o2[1];   
    }
  });

  // 여기까지 왔으면 sorting은 된 상태. 

   count = prev_end_time = 0;     

  for (int i=0; i < N; i++) {
      if (prev_end_time <= time[i][0] ) {
             prev_end_time = time[i][1];
   
           count++;
      }        
  }       

------------------------------
===================
필요한 널빤지의 최소 갯수 구하기. 

3 3  (웅덩이 개수, 널빤지 길이)
1 6   (웅덩이 시작, 끝)
13 17
8 12

   arr[i][0] = 널빤지 시작.
   arr[i][1] = 널빤지 끝.

   |--------| |---------| |----------|
  1         6 8       12 13        17 
   ###


    	int nulpan = 0;	// 필요한 널빤지의 개수
	int range = 0;	// 널빤지를 물웅덩이에 덮었을때, 덮을 수 있는 범위
		
	for(int i=0; i<N; i++) {
	   if(arr[i][0] > range)
	      range = arr[i][0];
	   if(arr[i][1] >= range) {
	      while(arr[i][1] > range) {
	         range += L;
	         nulpan ++;
	      }
	   }
	}
=========================================                  
      static class Data{
	int x, y;
		
	Data(int x, int y) {
	   this.x = x;
	   this.y = y;
	}	
     }

     Queue <Data> q = new LinkedList<>();
     q.add(new Data(x,y));
     ...
     ...
     Data out;
     out = q.poll();
     x = out.x;
     y = out.y;
    
-----------------------------------------------------------------------

/*

7 1 4

-->

4 1 6 5 7 3 2 
*/


 1 2 3 4 5 6 7

import java.util.*;
import java.util.Scanner;

public class Main {
	int N; //직원 수
	int S; //시작 직원 번호
	int M; //건너 뛰기 
		
        

      	int qq;
		Queue <Integer> q = new LinkedList <Integer>(); 		
		for (int i =1; i <= N; i++) {
           q.add(i);     
        }

        for (int i =1; i < S; i++) {
           qq = q.poll();
           q.add(qq);
        }
		while (N>0) {
			for (int i =1; i <= M; i++) {
			   qq = q.poll();
			   if (i !=M) q.add(qq);
			   else {
				   System.out.printf("%d \n", qq);
				   N--;
			   }
			}         
		}

-------------------------------------------------------------------





















